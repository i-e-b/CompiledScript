
// A sketch of pick/switch syntax

set( val random(1 10) ) // runtime value

pick (
    // pick expects a list of `if` statements
    // the first one that matches will run,
    // and all subsequent ones will be ignored
    if ( equals(1 get(val)
        print("The random number was UNO! You win!")
    )
    
    if ( equals(10 get(val))
        print("The random number was DIEZ! You lose!")
    )
    
    if ( <(5 get(val))
        print("The random number was less than five. Are you half way there?")
    )
    
    if ( true
        print("Boring. Try again")
    )
)

// I think this can be converted to:
/*
def(
    __TEMP_NAME () (
        if ( equals(1 get(val)
            print("The random number was UNO! You win!")
            return() // injected to the end of the `if`'s children.
        )
    
        // ... and so on.
    )
)
__TEMP_NAME()


// IDEAS...
// Pick can act like a function call, with return statements? Normal rules apply.

pick ( //  <-----------------------------+
    if ( not-equal(5 get(val))  //       |
        if ( =(get(val) 4)      //       |
            print("moof")       //       |
            return()            // ------+
        )
        print("qua?")
    )

    // Fall through? Not sure
    print("I run in the default case?")
)    
    

*/
